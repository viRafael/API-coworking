// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}

enum ReservationStatus {
  ACTIVE
  CANCELLED
  COMPLETED
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id        String   @id @default(uuid()) @map("id")
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updateAt  DateTime @updatedAt() @map("updated_at")

  // Relação de 1:N com Reservas
  reservations    Reservation[]
  blackListTokens BlackListTokens[]

  @@map("users")
}

model Room {
  id          String     @id @default(uuid()) @map("id")
  name        String
  description String
  status      RoomStatus @default(AVAILABLE)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  // Relação de 1:N com Reservas
  reservations Reservation[]

  @@map("rooms")
}

model Reservation {
  id              String            @id @default(uuid()) @map("id")
  userId          String            @map("user_id")
  roomId          String            @map("room_id")
  name            String
  description     String
  dateReservation DateTime          @map("reservation_date")
  startTime       DateTime          @map("start_time")
  endTime         DateTime          @map("end_time")
  status          ReservationStatus @default(ACTIVE)
  createdAt       DateTime          @default(now()) @map("created_at")
  updateAt        DateTime          @updatedAt() @map("updated_at")

  // Chaves estrangeiras e relações
  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  @@map("reservations")
}

model BlackListTokens {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiredAt DateTime

  // Chave estrangeira e relação
  user User @relation(fields: [userId], references: [id])

  @@map("black_listed_tokens")
}
